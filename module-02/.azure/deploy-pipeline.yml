trigger: none

pool:
  vmImage: 'ubuntu-latest'

parameters:
- name: azureServiceConnection
  type: string
- name: subscriptionId
  type: string
- name: location
  type: string

variables:
  isMain: $[eq(variables['Build.SourceBranch'], 'refs/heads/main')]
  resourceGroupName: 'module-02-rg'
  bicepFile: 'module-02/bicep/main.bicep'
  bicepParametersFile: 'module-02/bicep/main.bicepparam'
  deployEnvironmentName: 'module-02-deploy'

stages:
- stage: Validate
  displayName: 'Validate Module 02'
  jobs:
  - job: ValidateModule02
    displayName: 'Validate Module 02'
    steps:
    - checkout: self
      fetchDepth: 0
    - task: AzureCLI@2
      displayName: Lint main.bicep
      inputs:
        azureSubscription: ${{ parameters.azureServiceConnection }}
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          az bicep install
          az bicep lint --file ${{ variables.bicepFile }} --diagnostics-format sarif > $(System.DefaultWorkingDirectory)/bicep.sarif
    # Install and run PSRule for Azure
    - task: ps-rule-install@2
      displayName: Install PSRule module for Azure
      inputs:
        module: PSRule.Rules.Azure
        latest: true
        prerelease: false
    - task: ps-rule-assert@2
      displayName: Analyze Azure template files
      continueOnError: true
      inputs:
        inputType: inputPath
        inputPath: 'module-02/bicep/'
        modules: 'PSRule.Rules.Azure'
        outputFormat: NUnit3
        outputPath: reports/ps-rule-results.xml
    - task: PublishTestResults@2
      displayName: 'Publish PSRule results'
      condition: always()
      inputs:
        testRunTitle: 'PSRule'
        testRunner: NUnit
        testResultsFiles: 'reports/ps-rule-results.xml'

- stage: Deploy
  displayName: 'Deploy Module 02 Resources'
  dependsOn: Validate
  condition: and(succeeded(), eq(variables.isMain, true))
  jobs:
  - deployment: DeployModule02
    displayName: Deploy Module 02
    pool:
      vmImage: 'ubuntu-latest'
    environment:
      name: ${{ variables.deployEnvironmentName }}
    strategy:
      runOnce:
        deploy:
          steps:
            - checkout: self
              fetchDepth: 0
            - task: AzureCLI@2
              displayName: 'Create Resource Group'
              inputs:
                azureSubscription: ${{ parameters.azureServiceConnection }}
                scriptType: bash
                scriptLocation: inlineScript
                inlineScript: |
                  # Creating a resource group
                  echo "Creating resource group ${{ variables.resourceGroupName }} in location ${{ parameters.location }}"
                  az group create --name ${{ variables.resourceGroupName }} --location ${{ parameters.location }}
            - task: AzureCLI@2
              displayName: 'Run What-If Analysis'
              inputs:
                azureSubscription: ${{ parameters.azureServiceConnection }}
                scriptType: bash
                scriptLocation: inlineScript
                inlineScript: |
                  # Run What-If deployment
                  echo "Running What-If deployment for ${{ variables.bicepFile }} in resource group ${{ variables.resourceGroupName }}"
                  az deployment group what-if --resource-group ${{ variables.resourceGroupName }} --template-file ${{ variables.bicepFile }} --parameters ${{ variables.bicepParametersFile }}
            - task: AzureCLI@2
              displayName: 'Deploy Bicep'
              inputs:
                azureSubscription: ${{ parameters.azureServiceConnection }}
                scriptType: bash
                scriptLocation: inlineScript
                inlineScript: |
                  # Deploying Bicep file
                  echo "Deploying Bicep file ${{ variables.bicepFile }} to resource group ${{ variables.resourceGroupName }}"
                  az deployment group create --resource-group ${{ variables.resourceGroupName }} --template-file ${{ variables.bicepFile }} --parameters ${{ variables.bicepParametersFile }}